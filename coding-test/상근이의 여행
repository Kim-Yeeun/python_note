
import sys
input = sys.stdin.readline

def dfs(v, cnt):
  visited[v] = True
  for i in graph[v]:
    if not visited[i]:
      cnt += 1
      cnt = dfs(i, cnt)
  return cnt

result = []
for _ in range(int(input())):
  n, m = map(int, input().split())
  
  graph = [[] for _ in range(n+1)]
  for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)
    
  visited = [False] * (n+1)

  result.append(dfs(1, 0))

for i in result:
  print(i)
  
#-------------------------------------------------------------------------------------------------------------------------------

import sys
input = sys.stdin.readline

from collections import deque

def bfs(start, cnt):
  cnt = 0 # 비행기 개수
  queue = deque([start]) # 현재 노드를 원소로 가진 큐 생성
  while queue: # 큐가 빌 때까지
    v = queue.popleft() # 큐에서 왼쪽 노드 꺼내 v에 저장
    visited[v] = True
    for i in graph[v]: # v 노드와 연결된 노드를 확인
      if not visited[i]: # 방문하지 않은 노드일 경우
        queue.append(i) # 큐에 넣음
        visited[i] = True # 방문 처리
        cnt += 1 # 비행기 개수 1 증가
  return cnt

# def dfs(v, cnt):
#   visited[v] = True # 현재 노드 방문 처리
#   for i in graph[v]: # 현재 노드와 연결된 노드들 확인
#     if not visited[i]: # 방문하지 않은 노드일 경우
#       cnt = dfs(i, cnt+1) # 해당 노드를 루트로 가지고 dfs 수행, 비행기 개수 1 증가
#   return cnt

t = int(input())
result = []
for _ in range(t):
  n, m = map(int, input().split())
  graph = [[] for _ in range(n+1)]
  for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)
  visited = [False] * (n+1)
  # result.append(dfs(1, 0))
  result.append(bfs(1, 0))

for i in result:
  print(i)
  
