
#------------------------------------------------------------------------------------------------------------
# 2차원 공간에서의 방향 벡터

dy = [0, -1, 0, 1]
dx = [1, 0, -1, 0]

x, y = 2, 2

for i in range(4):
  nx = x + dx[i] 
  ny = y + dy[i]
  print(nx, ny) # 3 2 / 2 1 / 1 2 / 2 3 
  
#------------------------------------------------------------------------------------------------------------
# 상하좌우 문제
# 여행가 A는 N X N 크기의 정사각형 공간에 있고 공간은 1 X 1 크기의 정사각형으로 나누어져 있다
# 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)
# 여행가는 상, 하, 좌, 우 방향으로 이동 가능하며 시작 좌표는 항상 (1, 1)
# L(왼쪽), R(오른쪽), U(위), D(아래) 로 이동하며 최종 좌표 구하기

n = int(input()) # 5
x, y = 1, 1
m = input().split() # R R R U D D

# L, R, U, D에 따른 이동 방향
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
way = ['L', 'R', 'U', 'D']

# 이동 계획을 하나씩 확인
for i in m:
  for j in range(len(way)):
    if i == way[j]:
      # 좌표 이동
      nx = x + dx[j]
      ny = y + dy[j]
      
  # 공간을 벗어나는 경우
  if nx < 1 or ny < 1 or nx > n or ny > n:
    continue
  # 이동 수행
  x, y = nx, ny

print(x, y) # 3 4

#------------------------------------------------------------------------------------------------------------
# 시각 문제
# 정수 N이 입력
# 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중 3이 하나라도 포함되는 모든 경우의 수
# -> 가능한 모든 시각의 경우를 하나씩 모두 세서 풀 수 있는 문제
# -> 완전 탐색 문제 유형 : 가능한 경우의 수를 모두 검사해보는 탐색 방법

n = int(input()) # 5

count = 0
for i in range(n + 1):
  for j in range(60):
    for k in range(60):
      if '3' in str(i) + str(j) + str(k):
        count += 1

print(count) # 11475

#------------------------------------------------------------------------------------------------------------
# 왕실의 나이트 문제
# 왕실 정원은 8 X 8 좌표 평면
# 나이트는 L자 형태로만 이동할 수 있다.
# 나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수
# 행 위치는 1~8, 열 위치는 a~h

l = input() # a1
row = int(l[1])
column = int(ord(l[0])) - int(ord('a')) + 1

dr = [-1, -1, 1, 1, -2, -2, 2, 2]
dc = [2, -2, 2, -2, 1, -1, 1, -1]

way = ['LU2', 'LD2', 'RU2', 'RD2', 'L2U', 'L2D', 'R2U', 'R2D']

count = 0
for i in range(len(way)):
  nr = row + dr[i]
  nc = column + dc[i]

  if nr >= 1 and nc >= 1 and nr <= 8 and nc <= 8:
    count += 1

print(count) # 2

# 방향을 정의하는 또 다른 방법

l = input() # a1
row = int(l[1])
column = int(ord(l[0])) - int(ord('a')) + 1

ways = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]

count = 0
for way in ways:
  nr = row + way[0]
  nc = column + way[1]

  if nr >= 1 and nc >= 1 and nr <= 8 and nc <= 8:
    count += 1

print(count) # 2

#------------------------------------------------------------------------------------------------------------
# 문자열 재정렬 문제
# 알파벳 대문자와 숫자로만 구성된 문자열을 입력
# 모든 알파벳을 오름차순으로 정렬 후 이어서 뒤에 모든 숫자를 더한 값을 붙여서 출력

s = input() # K1KA5CB7

num = 0
alphabet = []
for i in s:
  if i.isdigit():
    num += int(i)
  else:
    alphabet.append(i)

alphabet.sort()

alpha = ''
for i in alphabet:
  alpha += i

print(alpha + str(num)) # ABCKK13

# 리스트의 원소를 공백없이 출력


s = input() # K1KA5CB7

num = 0
alphabet = []
for i in s:
  if i.isdigit():
    num += int(i)
  else:
    alphabet.append(i)

alphabet.sort()

print(''.join(alphabet) + str(num)) # ABCKK13


