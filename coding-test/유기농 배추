
from collections import deque

def bfs(graph, x, y):
  dx = [0, 0, -1, 1]
  dy = [1, -1, 0, 0]

  queue = deque()
  queue.append((x, y)) # 현재 위치 저장
  graph[x][y] = 0 # 현재 위치 방문 처리

  while queue: # 큐가 빌 때까지
    x, y = queue.popleft()
    for i in range(4): # 상하좌우 방문
      nx = x + dx[i]
      ny = y + dy[i]
      if nx < 0 or nx >= m or ny < 0 or ny >= n: # 범위를 벗어나는 경우
        continue
      if graph[nx][ny] == 1: # 방문하지 않은 경우
        graph[nx][ny] = 0 # 해당 위치 방문 처리
        queue.append((nx, ny)) # 해당 위치 큐에 담음
  return

t = int(input())

for _ in range(t):
  m, n, k = map(int, input().split()) # 가로, 세로, 위치 개수
  graph = [[0] * n for _ in range(m)] # 모든 위치 0으로 초기화
  result = 0 # 배추 개수
  
  for _ in range(k):
    x, y = list(map(int, input().split()))
    graph[x][y] = 1 # 배추 있는 위치 1로 설정
    
  for i in range(m):
    for j in range(n):
      if graph[i][j] == 1: # 배추가 있는 부분일 경우
        bfs(graph, i, j) # 상하좌우 확인
        result += 1
  print(result)
  
  
