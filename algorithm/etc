
#-----------------------------------------------------------------------------------------------
# 소수
# 1보다 큰 자연수 중에서 1과 자기 자신을 제외한 자연수로는 나누어 떨어지지 않는 자연수
# * 시간 복잡도 분석: 2부터 X-1까지의 모든 자연수에 대해 연산을 수행 -> O(X)

def is_prime_number(x):
  for i in range(2, x):
    if x % i == 0:
      return False
  return True

print(is_prime_number(4))
print(is_prime_number(7))

#-----------------------------------------------------------------------------------------------
# 약수
# 모든 약수가 가운데 약수를 기준으로 곱셈 연산에 대해 대칭
# 특정 자연수의 모든 약수를 찾을 때 가운데 약수(제곱근)까지 확인
# * 시간 복잡도 분석 : O(N^1/2)

# 개션된 소수 판별 알고리즘
import math

def is_prime_number(x):
  for i in range(2, int(math.sqrt(x))+1):
    if x % i == 0:
      return False
  return True

print(is_prime_number(4))
print(is_prime_number(7))

#-----------------------------------------------------------------------------------------------
# 에라토스테네스의 체
# 다수의 자연수에 대해 소수 여부를 판별할 때 사용
# N보다 작거나 같은 모든 소수를 찾을 때 사용
# 1. 2부터 N까지의 모든 자연수를 나열
# 2. 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다.
# 3. 남은 수 중에서 i의 배수를 모두 제거(i 제외)
# 더 이상 반복할 수 없을 때까지 2, 3번 과정 반복
# * 시간 복잡도 분석 : 선형 시간에 가까울 정도로 매우 빠르다. -> O(NloglogN), 메모리가 많이 필요

import math

n = 1000
array = [True for i in range(n+1)]

for i in range(2, int(math.sqrt(n))+1):
  if array[i] == True:
    j = 2
    while i*j <= n:
      array[i*j] = False
      j += 1

for i in range(2, n+1):
  if array[i]:
    print(i, end=' ')

#-----------------------------------------------------------------------------------------------
# 투 포인터



