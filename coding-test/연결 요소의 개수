
import sys
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

def dfs(v):
  visited[v] = True
  for i in graph[v]:
    if not visited[i]:
      dfs(i)

n, m = map(int, input().split())

graph = [[] for _ in range(n+1)]
for _ in range(m):
  x, y = map(int, input().split())
  graph[x].append(y)
  graph[y].append(x)

visited = [False] * (n+1)

result = 0
for i in range(1, n+1):
  if not visited[i]:
    dfs(i)
    result += 1

print(result)

#-------------------------------------------------------------------------------------------------------------------------

import sys
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

from collections import deque

def bfs(start):
  queue = deque([start])
  while queue:
    v = queue.popleft()
    visited[v] = True
    for i in graph[v]:
      if not visited[i]:
        queue.append(i)
  return

def dfs(v):
  visited[v] = True
  for i in graph[v]:
    if not visited[i]:
      dfs(i)

n, m = map(int, input().split())
graph = [[] for _ in range(n+1)]
for _ in range(m):
  u, v = map(int, input().split())
  graph[u].append(v)
  graph[v].append(u)
visited = [False] * (n+1)

cnt = 0
for i in range(1, n+1):
  if not visited[i]:
    # bfs(i)
    dfs(i)
    cnt += 1

print(cnt)

