
#------------------------------------------------------------------------------------------------------
# 최단 경로 알고리즘
# 각 지점은 그래프에서 노드로 표현, 지점 간 연결된 도로는 그래프에서 간선으로 표현

#------------------------------------------------------------------------------------------------------
# 다익스트라 최단 경로 알고리즘
# 특정 노드에서 출발하여 다른 모든 노드로 가는 최단 경로 계산
# 음의 간선이 없을 때 정상적으로 동작(현실 세계의 도로는 음의 간선으로 표현되지 않는다.)
# 그리디 알고리즘으로 분류(매 상황에서 가장 비용이 적은 노드를 선택하여 반복)
# 1. 출발 노드를 설정
# 2. 최단 거리 테이블 초기화
# 3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택
# 4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신
# 5. 3, 4번을 반복  
# -> 단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 매 단계마다 1차원 테이블의 모든 원소를 확인(순차 탐색)한다.
# * 시간 복잡도 분석 : 총 O(V)번에 걸쳐서 최단 거리가 가장 짧은 노드를 매번 선형 탐색 -> O(V^2) -> 일반적으로 코딩 테스트 최단 경로 문제에서 전체 노드 개수가 5000개 이하라면 이 코드로 문제 해결 가능

import sys
input = sys.stdin.readline
INF = int(1e9) #  무한을 의미하는 값으로 10억을 설정

n, m = map(int, input().split()) # 노드 개수, 간선 개수 입력
start = int(input()) # 시작 노드 번호 입력
graph = [[] for i in range(n+1)] # 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트 생성
visited = [False] * (n+1) # 방문여부 체크를 위한 리스트 생성
distance = [INF] * (n+1) # 최단 거리 테이블을 모두 무한으로 초기화

# 모든 간선 정보를 입력(방향 그래프라고 가정)
for _ in range(m) : 
  a, b, c = map(int, input().split())
  graph[a].append((b, c)) # a번 노드에서 b번 노드로 가는 비용이 c

# 방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드의 번호 반환 - 매번 단계를 반복할 때마다 사용
def get_smallest_node(): 
  min_value = INF
  idx = 0 # 가장 최단 거리가 짧은 노드(인덱스)
  for i in range(1, n+1):
    if distance[i] < min_value and not visited[i]:
      min_value = distance[i]
      idx = 1
  return idx

def dijkstra(start):
  # 시작 노드 초기화
  distance[start] = 0
  visited[start] = True
  # 출발 노드로부터 당장 도달이 가능한 노드까지의 거리 갱신
  for j in graph[start]:
    distance[j[0]] = j[1]

  # 시작 노드 제외한 나머지 n-1개 노드에 대해 반복
  for i in range(n-1):
    # 현재 최단 거리가 가장 짧은 노드를 꺼내 방문 처리
    now = get_smallest_node()
    visited[now] = True
    # 현재 노드와 연결된 다른 노드 확인
    for j in graph[now]:
      cost = distance[now] + j[1]
      # 현재 노드를 거쳐 다른 노드로 이동하는 거리가 더 짧은 경우
      if cost < distance[j[0]]:
        distance[j[0]] = cost

# 다익스트라 알고리즘 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리 출력
for i in range(1, n+1):
  # 도달할 수 없는 경우, 무한이라고 출력
  if distance[i] == INF:
    print("infinity")
  # 도달할 수 있는 경우 거리 출력
  else:
    print(distance[i])

#------------------------------------------------------------------------------------------------------
# 우선순위 큐
# 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조
# EX. 여러 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내 확인해야하는 경우에 사용

#------------------------------------------------------------------------------------------------------
# 힙(Heap)
# 우선순위 큐를 구현하기 위해 사용하는 자료구조 중 하나
# 최소 힙, 최대 힙
# 다익스트라 최단 경로 알고리즘을 포함한 다양한 알고리즘에서 사용

# 최소 힙
import heapq

def heapsort(iterable):
  h = []
  result = []
  # 모든 원소를 차례대호 힙에 삽입
  for value in iterable:
    heapq.heappush(h, value)
  # 힙에 삽입된 모든 원소를 차례대로 꺼내 담기
  for i in range(len(h)):
    result.append(heapq.heappop(h))
  return result

result = heapsort([1, 4, 6, 2, 7, 9, 4, 6, 5])
print(result)

# 최대 힙
import heapq

def heapsort(iterable):
  h = []
  result = []
  # 모든 원소를 차례대호 힙에 삽입
  for value in iterable:
    heapq.heappush(h, -value)
  # 힙에 삽입된 모든 원소를 차례대로 꺼내 담기
  for i in range(len(h)):
    result.append(-heapq.heappop(h))
  return result

result = heapsort([1, 4, 6, 2, 7, 9, 4, 6, 5])
print(result)

#------------------------------------------------------------------------------------------------------
# 다익스트라 알고리즘 : 개선된 구현 방법
# 다익스트라 알고리즘이 동작하는 기본 원리는 동일
# 현재 가장 가까운 노드를 저장하기 위해 힙 자료구조를 추가적으로 이용
# 현재 최단 거리가 가장 짧은 노드를 선택해야 하므로 최소 힙 사용
# * 시간 복잡도 분석 : O(ElogV)

import heapq
import sys
input = sys.stdin.readline
INF = int(1e9) #  무한을 의미하는 값으로 10억을 설정

n, m = map(int, input().split()) # 노드 개수, 간선 개수 입력
start = int(input()) # 시작 노드 번호 입력
graph = [[] for i in range(n+1)] # 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트 생성
distance = [INF] * (n+1) # 최단 거리 테이블을 모두 무한으로 초기화

# 모든 간선 정보를 입력(방향 그래프라고 가정)
for _ in range(m) : 
  a, b, c = map(int, input().split())
  graph[a].append((b, c)) # a번 노드에서 b번 노드로 가는 비용이 c

def dijkstra(start):
  q = []
  # 시작 노드로 가기 위한 최단 경로는 0으로 설정하여 큐에 삽입
  heapq.heappush(1, (0, start))
  distance[start] = 0
  # 큐가 비어있지 않는 경우 반복
  while q:
    # 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
    dist, now = heapq.heappop(q)
    # 현재 노드가 이미 처리된 적 있는 노드라면 무시
    if distance[now] < dist:
      continue
    # 현재 노드와 연결된 다른 노드 확인
    for i in graph[now]:
      cost = dist + i[1]
      # 현재 노드를 거쳐 다른 노드로 이동하는 거리가 더 짧은 경우
      if cost < distance[i[0]]:
        distance[i[0]] = cost
        heapq.headpush(q, (cost, i[0]))

# 다익스트라 알고리즘 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리 출력
for i in range(1, n+1):
  # 도달할 수 없는 경우, 무한이라고 출력
  if distance[i] == INF:
    print("infinity")
  # 도달할 수 있는 경우 거리 출력
  else:
    print(distance[i])



