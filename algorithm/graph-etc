
#----------------------------------------------------------------------------------------------------------------------
# 서로소 집합(합치기 찾기)
# 공통 원소가 없는 두 집합
# 합집합(Union) : 두 개의 원소가 포합된 집합을 하나의 집합으로 합치는 연산
# 찾기(Find) : 특정 원소가 속한 집합이 어떤 집합인지 알려주는 연산
# 1. 합집합 연산으로 확인하여 서로 연결된 두 노드 A, B를 확인
# 1-1. A, B의 루트 노드 A', B'를 각각 찾은 후 A'를 B'의 부모 노드로 설정
# 2. 모든 합집합 연산을 처리할 때까지 1번 과정을 반복

# 특정 원소가 속한 집합 찾기
def find_parent(parent, x):
  # 루트 노드를 찾을 때까지 재귀 호출
  if parent[x] != x:
    return find_parent(parent, parent[x])
  return x

# 두 원소가 속한 집합 합치기
def union_parent(parent, a, b):
  a = find_parent(parent, a)
  b = find_parent(parent, b)
  if a < b:
    parent[b] = a
  else:
    parent[a] = b

# 노드 개수와 간선 개수 입력
v, e = map(int, input().split())
parent = [0] * (1, v+1) # 부모 테이블 초기화

# 부모 테이블상에서 부모를 자기 자신으로 초기화
for i in range(e):
  a, b = map(int, input().split())
  union_parent(parent, a, b)

# 각 원소가 속한 집합 출력
for i in range(1, v+1):
  print(find_parent(parent, i), end=' ')

print()

# 부모 테이블 내용 출력
for i in range(1, v+1):
  print(parent[i], end=' ')
  
#----------------------------------------------------------------------------------------------------------------------
# 서로소 집합(합치기 찾기) - 경로 압축
# 찾기 함수를 최적화하기 위한 방법
# 찾기 함수를 재귀적으로 호출한 뒤에 부모 테이블 값을 바로 갱신
# 시간 복잡도가 개선

# 특정 원소가 속한 집합 찾기
def find_parent(parent, x):
  # 루트 노드가 아니라면 루트 노드를 찾을 때까지 재귀적으로 호출
  if parent[x] != x:
    parent[x] =  find_parent(parent, parent[x])
  return parent[x]

# 두 원소가 속한 집합 합치기
def union_parent(parent, a, b):
  a = find_parent(parent, a)
  b = find_parent(parent, b)
  if a < b:
    parent[b] = a
  else:
    parent[a] = b

# 노드 개수와 간선 개수 입력
v, e = map(int, input().split())
parent = [0] * (1, v+1) # 부모 테이블 초기화

# 부모 테이블상에서 부모를 자기 자신으로 초기화
for i in range(e):
  a, b = map(int, input().split())
  union_parent(parent, a, b)

# 각 원소가 속한 집합 출력
for i in range(1, v+1):
  print(find_parent(parent, i), end=' ')

print()

# 부모 테이블 내용 출력
for i in range(1, v+1):
  print(parent[i], end=' ')
  
#----------------------------------------------------------------------------------------------------------------------
# 서로소 집합을 활용한 사이클 판별
# 서로소 집합은 무방향 그래프 내에서의 사이클을 판별할 때 사용 가능(방향 그래프 내에서의 사이클 여부는 DFS 이용)
# 1. 각 간선을 하나씩 확인하며 두 노드의 루트 노드를 확인
# 1-1. 루트 노드가 서로 다르다면 두 노드에 대해 합집합 연산 수행
# 1-2. 루트 노드가 서로 같다면 사이클이 발생한 것
# 2. 그래프에 포함되어 있는 모든 간선에 대해 1번 과정을 반복

# 특정 원소가 속한 집합 찾기
def find_parent(parent, x):
  # 루트 노드가 아니라면 루트 노드를 찾을 때까지 재귀적으로 호출
  if parent[x] != x:
    parent[x] =  find_parent(parent, parent[x])
  return parent[x]

# 두 원소가 속한 집합 합치기
def union_parent(parent, a, b):
  a = find_parent(parent, a)
  b = find_parent(parent, b)
  if a < b:
    parent[b] = a
  else:
    parent[a] = b

# 노드 개수와 간선 개수 입력
v, e = map(int, input().split())
parent = [0] * (1, v+1) # 부모 테이블 초기화

# 부모 테이블상에서 부모를 자기 자신으로 초기화
for i in range(1, v+1):
  parent[i] = i

cycle = False # 사이클 발생 여부

for i in range(e):
  a, b = map(int, input().split())
  # 사이클이 발생한 경우 종료
  if find_parent(parent, a) == find_parent(parent, b):
    cycle = True
    break
  # 사이클이 발생하지 않았다면 합집합 연산 수행
  else:
    union_parent(parent, a, b)

if cycle:
  print("O")
else:
  print("X")
  
#----------------------------------------------------------------------------------------------------------------------
# 신장 트리
# 그래프에서 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프

#----------------------------------------------------------------------------------------------------------------------
# 크루스칼 알고리즘


  
  

