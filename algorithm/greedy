
#----------------------------------------------------------------------------------------------------------------------------
# 거스름돈 문제
# 500, 100, 50, 10원의 동전이 무한히 존재
# 거슬러 줄 돈이 N원일 때 거슬러 줄 동전의 최소 개수 구하기
# -> 최적의 해를 구하기 위해서는 가장 큰 화폐 단위부터 돈을 거슬러준다.
# * 정당성 분석 : 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없다. 
# * 시간복잡도 분석 : 화폐 종류가 K일 때 O(K)

n = 1260
count = 0

array = [500, 100, 50, 10]

for coin in array:
  count += n // coin
  n %= coin

print(count) # 6

#----------------------------------------------------------------------------------------------------------------------------
# 1이 될 때까지 문제
# 어떠한 수 N이 1이 될 때까지
# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.
# 위의 두 과정 중 하나를 골라 반복적으로 수행해야하는 최소 횟수 구하기
# -> 주어진 N에 대하여 최대한 많이 나누기를 수행
# * 정당성 분석 : 나누기를 하는 것이 수를 기하급수적으로 빠르게 줄일 수 있다.

n, k = map(int, input().split()) # 25 2
count = 0

while n != 1:
  if n % k == 0:
    n /= k
    count += 1
  else:
    n -= k
    count += 1

print(count) # 2

# 시간복잡도를 줄일 수 있는 코드

n, k = map(int, input().split())
count = 0

while True:
  target = (n // k) * k # n이 k로 나누어 떨어지지 않을 때 가장 가까운 k로 나누어 떨어지는 수
  count += (n - target) # 빼기 연산 수행 횟수 더하기
  n = target
  
  if n < k:
    break
    
  count += 1
  n //= k
    
count += (n - 1) # 마지막으로 남은 수에 대하여 1씩 빼기
print(count)

#----------------------------------------------------------------------------------------------------------------------------
# 곱하기 또는 더하기 문제
# 각 자리가 숫자로 이루어진 문자열 S
# 왼쪽부터 오른쪽으로 하나씩 숫자를 모두 확인하며
# 숫자 사이에 'x' 또는 '+' 연산자를 넣어 만들어질 수 있는 가장 큰 수 구하기
# 모든 연산은 왼쪽에서부터 순서대로 이루어진다.
# EX. 02984 -> ((((0+2)*9)*8)*4) = 576

s = input()
result = int(s[0])

for i in range(1, len(s)):
  n = int(s[i])
  if result <= 1 or n <= 1:
    result += n
  else:
    result *= n

print(result)

#----------------------------------------------------------------------------------------------------------------------------
# 모험가 길드 문제
# 마을에 모험가가 N명 존재(공포도가 높은 모험가는 상황 대처 능력이 부족)
# 공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야한다.
# N명의 모험가가 있을 때, 여행을 떠날 수 있는 그룹 수의 최댓값
# -> 공포도를 오름차순으로 정렬한 후 앞에서부터 공포도를 확인하며 '현재 그룹에 포함된 모험가 수'가 '현재 확인하고 있는 공포도'보다 크거나 같다면 이를 그룹으로 설정한다.
# -> 공포도를 오름차순으로 정렬하면 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하게 된다.

n = int(input()) # 5
l = list(map(int, input().split())) # 2 3 1 2 2 
l.sort() # 1 2 2 2 3

result = 0 # 그룹 갯수
group = 0 # 그룹 멤버 수

for i in l:
  group += 1 # 현재 그룹에 해당 모험가 포함
  if group >= i: # 현재 그룹의 모험가 수가 해당 모험가의 공포도 이상이라면 그룹 결성
    result += 1
    group = 0 # 그룹의 모험가 수 초기화

print(result) # 2


