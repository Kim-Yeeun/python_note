
#-------------------------------------------------------------------------------------------
# 선택 정렬
# 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것
# * 시간복잡도 분석 : N(원소 개수)번 만큼 가장 작은 수를 찾아 맨 앞으로 보내야한다. -> O(N^2)

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
  min_idx = i # 가장 작은 원소 인덱스
  for j in range(i+1, len(array)):
    if array[min_idx] > array[j]:
      min_idx = j
  array[i], array[min_idx] = array[min_idx], array[i] # 스와프

print(array) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

#-------------------------------------------------------------------------------------------
# 삽입 정렬
# 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입
# * 시간복잡도 분석 : O(N^2) 이며 최선의 경우 O(N)

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)): # 2번째 원소부터 시작
  for j in range(i, 0, -1):
    if array[j] < array[j-1]:
      array[j], array[j-1] = array[j-1], array[j]
    else:
      break

print(array)

#-------------------------------------------------------------------------------------------
# 퀵 정렬
# 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법
# 첫번째 데이터를 기준 데이터(Pivot)로 설정
# EX. [5, 4, 9, 0, 3, 1, 6, 2, 7, 8]
# 1. 현재 피벗의 값은 5, 왼쪽에서부터 피벗보다 큰 데이터를 선택하므로 '9', 오른쪽에서부터 피벗보다 작은 데이터를 선택하므로 '5'를 선택하여 두 데이터의 위치를 서로 변경
# 2. 현재 피벗의 값은 5, 왼쪽에서부터 '6' 선택, 오른쪽에서부터 '1' 선택, 위치가 엇갈리는 경우 '피벗'과 '작은 데이터'의 위치를 서로 변경
# 3. 피벗을 기준으로 데이터 묶음을 나누는 작업 -> 분할(파티션)
# 4. 각 데이터 묶음에 대해 퀵 정렬 수행(재귀적으로 수행)
# * 시간복잡도 분석 : 이상적인 경우 분할이 절반씩 일어난다면 O(NlogN)을 기대할 수 있다. 최악의 경우 O(N^2)

array = [5, 4, 9, 0, 3, 1, 6, 2, 7, 8]

def quick_sort(array, start, end):
  if start >= end:
    return
  pivot = start
  left = start + 1
  right = end
  while left <= right: 
    while left <= end and array[left] <= array[pivot]: # 피벗보다 큰 데이터를 찾을 때까지 반복
      left += 1
    while right > start and array[right] >= array[pivot]: # 피벗보다 작은 데이터를 찾을 때까지 반복
      right -= 1
    if left > right: # 엇갈리는 경우 피벗과 작은 데이터를 교체
      array[right], array[pivot] = array[pivot], array[right]
    else: # 엇갈리지 않는 경우 큰 데이터와 작은 데이터를 교체
      array[left], array[right] = array[right], array[left]

    quick_sort(array, start, right-1)
    quick_sort(array, right+1, end) # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행

quick_sort(array, 0, len(array)-1)
print(array)

# 파이썬의 장점을 살린 코드
array = [5, 4, 9, 0, 3, 1, 6, 2, 7, 8]

def quick_sort(array):
  if len(array) <= 1: # 리스트가 하나 이하의 원소만을 가지면 종료
    return array
  pivot = array[0] # 첫번째 원소를 피벗으로 설정
  tail = array[1:] # 피벗을 제외한 리스트

  left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
  right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

  return quick_sort(left_side) + [pivot] + quick_sort(right_side) # 분할 후 왼쪽, 오른쪽 부분에서 각각 정렬 수행하고 전체 리스트 반환

print(quick_sort(array))

#-------------------------------------------------------------------------------------------
# 계수 정렬
# 특정 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작
# 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능
# 데이터 개수가 N, 데이터 중 최댓값이 K일 때 최악의 경우에도 수행 시간 O(N+K)를 보장
# 시간 복잡도와 공간 복잡도는 모두 O(N+K)
# 동일한 값의 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있다. 

array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

count = [0] * (max(array) + 1)

for i in range(len(array)):
  count[array[i]] += 1

for i in range(len(count)):
  for j in range(count[i]):
    print(i, end=' ')

#-------------------------------------------------------------------------------------------
# 두 배열의 원소 교체 문제
# 두 개의 배열 A, B이며 N개의 자연수로 구성
# 최대 K번의 바꿔치기 연산을 수행 -> 바꿔치기 연산이란 배열 A의 원소 하나와 배열 B의 원소 하나를 골라 서로 바꾸는 것
# 배열 A의 전체 원소 합의 최댓값
