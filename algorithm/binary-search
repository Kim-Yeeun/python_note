
#---------------------------------------------------------------------------------------------------------
# 이진 탐색
# 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색
# 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정
# * 시간복잡도 분석 : 단계마다 범위를 2로 나누는 것과 동일하므로 연산 횟수는 log_2N에 비례 -> O(logN)

# 재귀함수로 구현
def binary_search(array, target, start, end):
  if start > end:
    return None
    
  mid = (start + end) // 2

  if array[mid] == target:
    return mid
  elif array[mid] > target:
    return binary_search(array, target, start, mid-1)
  else:
    return binary_search(array, target, mid+1, end)

n, target = map(int, input().split()) # 10 7
array = list(map(int, input().split())) # 1 3 5 7 9 11 13 15 17 19

result = binary_search(array, target, 0, n-1)

if result == None:
  print("no answer")
else:
  print(result+1) # 4
  
# 반복문으로 구현
def binary_search(array, target, start, end):
  while start <= end:
    mid = (start + end) // 2

    if array[mid] == target:
      return mid
    elif array[mid] > target:
      end = mid - 1
    else:
      start = mid + 1
  return None

n, target = map(int, input().split())
array = list(map(int, input().split()))

result = binary_search(array, target, 0, n-1)

if result == None:
  print("no answer")
else:
  print(result+1)
  
from bisect import bisect_left, bisect_right

# 이진 탐색 라이브러리
# bisect_left(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스를 반환
# bisect_right(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 오른쪽 인덱스를 반환

a = [1, 2, 4, 4, 5]
x = 4

print(bisect_left(a, x)) # 2
print(bisect_right(a, x)) # 4

#---------------------------------------------------------------------------------------------------------
# 파라메트릭 서치
# 최적화 문제를 결정 문제(예 혹은 아니오)로 바꾸어 해결하는 기법
# 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제

#---------------------------------------------------------------------------------------------------------
# 떡볶이 떡 만들기 문제
# 절단기에 높이(h)를 지정하면 떡을 한번에 절단
# 높이가 19, 14, 10. 17인 떡이 있고 높이를 15로 지정하면 자른 후 떡의 높이는 15, 14, 10, 15가 된다.
# 잘린 떡의 길이는 4, 0, 0, 2이고 손님이 6만큼의 길이를 가져간다.
# 손님이 왔을 때 요청한 총 길이가 M일 때 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값
# -> 적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이를 반복해서 조정
# -> 현재 이 높이로 자르면 조건을 만족할 수 있는가? 를 확인한 후 조건의 만족 여부에 따라 탐색 범위를 좁혀서 해결
# -> 큰 탐색 범위를 보면 가장 먼저 이진 탐색을 떠올려야 한다.

def cut(h, n, m, start, end):
  mid = (start + end) // 2

  sum = 0
  for i in range(n):
    if h[i] > mid:
      sum += h[i] - mid

  if sum == m:
    return mid
  elif sum > m:
    return cut(h, n, m, mid+1, end)
  else:
    return cut(h, n, m, start, mid-1)
    
n, m = map(int, input().split()) # 4 6
h = list(map(int, input().split())) # 19 15 10 17

print(cut(h, n, m, 0, max(h))) # 15

#---------------------------------------------------------------------------------------------------------
# 정렬된 배열에서 특정 수의 개수 구하기 문제
# N개 원소를 포함한 수열이 오름차순으로 정렬, 수열에서 x가 등장하는 횟수를 계산
# 시간 복잡도 O(logN)으로 설계

from bisect import bisect_left, bisect_right

n, x = map(int, input().split()) # 7 2
l = list(map(int, input().split())) # 1 1 2 2 2 2 3

if x in l:
  cnt = bisect_right(l, x) - bisect_left(l, x)
  print(cnt) # 4
else:
  print(-1)


