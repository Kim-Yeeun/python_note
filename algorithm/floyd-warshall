
#---------------------------------------------------------------------------------------------
# 플로이드 워셜 알고리즘
# 모든 노드에서 다른 모든 노드까지의 최단 경로를 모두 계산
# 다익스트라 알고리즘과 마찬가지로 단계별로 거쳐가는 노드를 기준으로 알고리즘 수행
# 매 단계마다 방문하지 않은 노드 중 최단 거리를 갖는 노드를 찾는 과정은 필요하지 않다.
# 2차원 테이블에 최단 거리 정보 저장
# 다이나믹 프로그래밍 유형 - 점화식에 맞게 삼중 반복문을 사용하여 2차원 테이블을 갱신해주는 방식
# 각 단계마다 특정 노드 k를 거쳐 가는 경우를 확인 - a에서 b로 가는 최단 거리보다 a에서 k를 거쳐 b로 가는 거리가 더 짧은지 검사
# 점화식 = D(ab) = min(D(ab), D(ak)+D(kb))
# * 시간 복잡도 분석 : 노드 개수가 N개일 때 알고리즘상으로 N번의 단계 수행, 각 단계마다 O(N^2)의 연산을 통해 현재 노드를 거쳐 가는 모든 경로를 고려 = O(N^3)

INF = int(1e9) #  무한을 의미하는 값으로 10억을 설정

n, m = map(int, input().split()) # 노드 개수, 간선 개수 입력
graph = [[INF]*(n+1) for _ in range(n+1)] # 2차원 리스트(그래프 표현) 생성 후 무한으로 초기화

# 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n+1):
  for b in range(1, n+1):
    if a == b:
      graph[a][b] = 0

# 모든 간선 정보를 입력하고 그 값으로 초기화
for _ in range(m) : 
  a, b, c = map(int, input().split())
  graph[a][b] = c # a번 노드에서 b번 노드로 가는 비용이 c

# 점화식에 따라 플로이드 워셜 알고리즘 수행
  for k in range(1, n+1):
    for a in range(1, n+1):
      for b in range(1, n+1):
        graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

# 모든 노드로 가기 위한 최단 거리 출력
for i in range(1, n+1):
  # 도달할 수 없는 경우, 무한이라고 출력
  if graph[a][b] == INF:
    print("infinity")
  # 도달할 수 있는 경우 거리 출력
  else:
    print(graph[a][b], end=' ')



