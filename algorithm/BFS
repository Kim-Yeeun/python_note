
#----------------------------------------------------------------------------------------------------------------
# BFS(너비 우선 탐색)
# 큐 자료구조 이용
# 1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
# 2. 큐에서 노드를 꺼낸 후 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리
# 3. 2번 과정을 수행할 수 없을 때까지 반복

from collections import deque

def bfs(graph, start, visited):
  queue = deque([start])
  visited[start] = True # 현재 노드를 방문 처리
  while queue: # 큐가 빌 때까지 반복
    v = queue.popleft() # 큐에서 하나의 원소를 뽑아 출력
    print(v, end=' ')

    for i in graph[v]: # 방문하지 않은 인접 원소들을 큐에 삽입
      if not visited[i]:
        queue.append(i)
        visited[i] = True
        
graph = [ # 그래프의 노드가 연결된 정보
  [],
  [2, 3, 8],
  [1, 7],
  [1, 4, 5],
  [3, 5],
  [3, 4],
  [7],
  [2, 6, 8],
  [1, 7]
]

visited = [False] * 9 # 각 노드의 방문 정보

bfs(graph, 1, visited) # 1 2 3 8 7 4 5 6

#----------------------------------------------------------------------------------------------------------------
# 미로 탈출 문제
# N X M 크기의 직사각형 미로
# 현재 위치는 (1, 1)이며 미로의 출구는 (N, M)에 존재, 한 번에 한 칸씩 이동
# 괴물이 있는 부분은 0 없는 부분은 1
# 탈출하기 위해 움직여야 하는 최소 칸의 개수
# 칸을 셀 때는 첫 칸과 마지막 칸을 포함
# -> 시작 지점에서 가까운 노드부터 차례대로 그래프의 모든 노드를 탐색해야 한다.
# 모든 노드 사이의 거리가 1로 동일하므로 (1, 1) 지점부터 BFS를 수행하여 모든 노드의 최단 거리 값을 기록하면 해결 가능

from collections import deque

def bfs(x, y):
  queue = deque()
  queue.append((x, y))

  while queue: # 큐가 빌 때까지 반복
    x, y = queue.popleft()
    for i in range(4): # 현재 위치에서 4가지 방향으로의 위치 확인
      nx = x + dx[i]
      ny = y + dy[i]
      
      if nx < 0 or nx >= n or ny < 0 or ny >= m: # 주어진 범위를 벗어나는 경우 무시
        continue

      if graph[nx][ny] == 0: # 벽인 경우 무시
        continue
      if graph[nx][ny] == 1: # 해당 노드를 처음 방문하는 경우에만 최단 거리 기록
        graph[nx][ny] = graph[x][y] + 1
        queue.append((nx, ny))
  
  return graph[n-1][m-1]

n, m = map(int, input().split())

graph = []
for i in range(n):
  graph.append(list(map(int, input())))

dx = [-1, 1, 0, 0] # 상하좌우 방향 정의
dy = [0, 0, -1, 1]

print(bfs(0, 0))



