
#----------------------------------------------------------------------------------------------------------------
# DFS(깊이 우선 탐색)
# 스택 자료구조 또는 재귀함수 이용
# 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
# 2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문 처리
# 3. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
# 4. 3-4번의 과정을 수행할 수 없을 때까지 반복

# 기본 예제
def dfs(graph, v, visited):
  visited[v] = True # 현재 노드를 방문 처리
  print(v, end=' ')
 
  for i in graph[v]: # 현재 노드와 인접한 다른 노드를 재귀적으로 방문
    if not visited[i]:
      dfs(graph, i, visited)

graph = [ # 그래프의 노드가 연결된 정보, 0번 노드는 비우고 1~8번의 노드 정보
  [],
  [2, 3, 8],
  [1, 7],
  [1, 4, 5],
  [3, 5],
  [3, 4],
  [7],
  [2, 6, 8],
  [1, 7]
]

visited = [False] * 9 # 각 노드의 방문 정보

dfs(graph, 1, visited) # 1 2 7 6 8 3 4 5

#----------------------------------------------------------------------------------------------------------------
# 음료수 얼려 먹기 문제
# N X M 크기의 얼음틀, 구멍이 뚫린 부분은 0 칸막이가 존재하는 부분은 1로 표시
# 얼음틀의 모양이 주어졌을 때 생성되는 총 아이스크림 개수
# -> 얼음을 얼릴 수 있는 공간이 상하좌우로 연결되어 있다고 표현할 수 있으므로 그래프 형태로 모델링 가능
# 1. 특정 지점의 상하좌우를 살펴본 뒤에 주변 지점 중에서 값이 0이면서 방문하지 않은 지점이 있다면 해당 지점 방문
# 2. 방문 지점에서 다시 상하좌우 살펴보며 과정을 반복하면 연결된 모든 지점을 방문할 수 있다.
# 3. 1~2번 과정을 반복하며 방문하지 않은 지점의 수를 카운트




